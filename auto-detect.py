# Basic idea is:
# Always scan H and W separately, i.e. consider as lines (1d > 2d)
# 0. An array of pixels and scores (-x = static, 0 = average/confused, x = moving)
# 1. Remove borders
# 2. Attempt to break into regions as follows:
#		a. For each line, require the next 5 (or so) lines to be excluded.
#		b. If including the next line (and excluding line n+6) would improve or not change your score, iterate.
#		c. When including the next line has lower score (presumably line n+6 has no additional cost), stop
#		d. Region is through n, restart process from 1, unless region is empty.
# 3. If larger range is broken into >1 region, pass regions into the alternate direction scan method.
#	4. If not, pass into border-stripping method, and then save final region into a list.
#	5. Stitch regions together (?)


# Removes pixels which are "bad" from the edge. Note: Trimming twice may remove "good" pixels, since there is no real buffer to use as comparison
def trim(xmin, xmax, ymin, ymax):
	v_line_scores = [0]*(xmax-xmin)
	h_line_scores = [0]*(ymax-ymin)
	for x in range(xmin, xmax):
		for y in range(ymin, ymax):
			v_line_scores[x-xmin] += regiondata[x][y]
			h_line_scores[y-ymin] += regiondata[x][y]

	# Unfortunately, the order of these loops matter, because this loop references xmin, which may be changed by the second loop.
	for x in range(xmax-1, xmin, -1):
		if v_line_scores[-1] < v_line_scores[x-xmin]:
			xmax = x+1
			break

	for x in range(xmin, xmax):
		if v_line_scores[0] < v_line_scores[x-xmin]:
			xmin = x
			break

	for y in range(ymax-1, ymin, -1):
		if h_line_scores[-1] < h_line_scores[y-ymin]:
			ymax = y+1
			break
	
	for y in range(ymin, ymax):
		if h_line_scores[0] < h_line_scores[y-ymin]:
			ymin = y
			break
	
	return (xmin, xmax, ymin, ymax)

def debug(xmin, xmax, ymin, ymax):
	for x in range(xmin, xmax):
		print regiondata[x][ymin:ymax]
	print

if __name__ == '__main__':
	# This should be generated by taking screenshots and comparing pixels. Somehow...
	global regiondata
	regiondata = []
	
	for line in '''
	00000000000000000000000000
	00000000000000000000000000
	00000000111100000000000000
	00000000111100000000000000
	00000000111100011110000000
	00000000111100011110000000
	00000000000000011110000000
	00000000000000011110000000
	00000000000000000000000000
	00000000000000000000000000
	00000000000000000000000000
	'''.strip().split('\n'):
		data = []
		for char in line.strip():
			if char == '0':
				data.append(-5)
			elif char == '1':
				data.append(5)
		regiondata.append(data)
	
	xmin, xmax, ymin, ymax = (0, len(regiondata), 0, len(regiondata[0]))
	debug(xmin, xmax, ymin, ymax)
	xmin, xmax, ymin, ymax = trim(xmin, xmax, ymin, ymax)
	debug(xmin, xmax, ymin, ymax)
